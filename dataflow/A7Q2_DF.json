{
	"name": "A7Q2_DF",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ADLS_LS",
						"type": "LinkedServiceReference"
					},
					"name": "CustomerFile"
				},
				{
					"linkedService": {
						"referenceName": "ADLS_LS",
						"type": "LinkedServiceReference"
					},
					"name": "CustomerAddressFile"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ADLS_JSON_DS",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as short,",
				"          NameStyle as boolean,",
				"          Title as string,",
				"          FirstName as string,",
				"          MiddleName as string,",
				"          LastName as string,",
				"          Suffix as string,",
				"          CompanyName as string,",
				"          SalesPerson as string,",
				"          EmailAddress as string,",
				"          Phone as string,",
				"          PasswordHash as string,",
				"          PasswordSalt as string,",
				"          rowguid as string,",
				"          ModifiedDate as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'landing',",
				"     folderPath: 'A7_Files',",
				"     fileName: 'SalesLT.Customer-lyLVZBwZit.txt',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> CustomerFile",
				"source(output(",
				"          CustomerID as short,",
				"          AddressID as short,",
				"          AddressType as string,",
				"          rowguid as string,",
				"          ModifiedDate as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: 'landing',",
				"     folderPath: 'A7_Files',",
				"     fileName: 'SalesLT.CustomerAddress-sOMTEGxQse.txt',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> CustomerAddressFile",
				"CustomerFile, CustomerAddressFile join(CustomerFile@CustomerID == CustomerAddressFile@CustomerID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          commitInfo as (timestamp as integer, userId as string, userName as string, operation as string, operationParameters as (mode as string, partitionBy as string), notebook as (notebookId as string), clusterId as string, isolationLevel as string, isBlindAppend as boolean, operationMetrics as (numFiles as string, numOutputRows as string, numOutputBytes as string), engineInfo as string, txnId as string),",
				"          protocol as (minReaderVersion as integer, minWriterVersion as integer),",
				"          metaData as (id as string, format as (provider as string, options as ({} as string)), schemaString as string, partitionColumns as string[], configuration as ({} as string), createdTime as integer),",
				"          add as (path as string, partitionValues as ({} as string), size as integer, modificationTime as integer, dataChange as boolean, stats as string, tags as (INSERTION_TIME as string, MIN_INSERTION_TIME as string, MAX_INSERTION_TIME as string, OPTIMIZE_TARGET_SIZE as string)),",
				"          CustomerID as integer,",
				"          AddressID as integer,",
				"          AddressType as string,",
				"          rowguid as string,",
				"          ModifiedDate as string",
				"     ),",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}